const { getSockets, getUserSocketIDs } = require("../utils/utility");
const { socketAuthenticator } = require("../middlewares/auth");
const { errorMiddleware } = require("../middlewares/error");
const Messages = require("../models/datavalidation/message");

const { Server } = require("socket.io");
const { corsOptions } = require("../config/config");
var app = require("../app");
var http = require("http");
const { v4: uuid } = require("uuid");

var cookieParser = require("cookie-parser");
var debug = require("debug");
var dotenv = require("dotenv");
dotenv.config({ path: ".env" });

const {
  CHAT_JOINED,
  CHAT_LEAVED,
  NEW_MESSAGE,
  NEW_MESSAGE_ALERT,
  ONLINE_USERS,
  START_TYPING,
  STOP_TYPING,
} = require("../constants/events");

//get port from env
var port = normalizePort(process.env.PORT || 5000);
app.set("port", port);

//http server

var server = http.createServer(app);
const io = new Server(server, {
  cors: corsOptions,
});

app.set("io", io);

io.use((socket, next) => {
  cookieParser()(
    socket.request,
    socket.request.res,
    async (err) => await socketAuthenticator(err, socket, next)
  );
});

let onlineUsers = new Set();
let userSocketIDs = getUserSocketIDs();

io.on("connection", async (socket) => {
  console.log(`socket.id connected:>> ${socket.id}`);
  const user = await socket.user;
  userSocketIDs.set(user._id.toString(), socket.id);

  socket.on(NEW_MESSAGE, async ({ chatId, members, message }) => {
    const messageForRealTime = {
      content: message,
      id: uuid(),
      sender_id: {
        _id: user._id,
        name: user.username,
      },
      chatroom_id: chatId,
      createdAt: new Date().toISOString(),
    };

    const messageForDB = {
      content: message,
      sender_id: user._id,
      chatroom_id: chatId,
    };
    const membersSocket = getSockets(members);
    io.to(membersSocket).emit(NEW_MESSAGE, {
      chatId,
      message: messageForRealTime,
    });
    io.to(membersSocket).emit(NEW_MESSAGE_ALERT, { chatId });

    try {
      await Messages.create(messageForDB);
    } catch (error) {
      throw new Error(error);
    }
  });

  socket.on(START_TYPING, ({ members, chatId }) => {
    const membersSockets = getSockets(members);
    socket.to(membersSockets).emit(START_TYPING, { chatId });
  });

  socket.on(STOP_TYPING, ({ members, chatId }) => {
    const membersSockets = getSockets(members);
    socket.to(membersSockets).emit(STOP_TYPING, { chatId });
  });

  socket.on(CHAT_JOINED, ({ userId, members }) => {
    onlineUsers.add(userId.toString());

    const membersSocket = getSockets(members);
    io.to(membersSocket).emit(ONLINE_USERS, Array.from(onlineUsers));
  });

  socket.on(CHAT_LEAVED, ({ userId, members }) => {
    onlineUsers.delete(userId.toString());

    const membersSocket = getSockets(members);
    io.to(membersSocket).emit(ONLINE_USERS, Array.from(onlineUsers));
  });

  socket.on("disconnect", () => {
    console.log(`socket.id disconnected:>> ${socket.id}`);
    userSocketIDs.delete(user._id.toString());
    onlineUsers.delete(user._id.toString());
    socket.broadcast.emit(ONLINE_USERS, Array.from(onlineUsers));
  });
});

app.use(errorMiddleware);

//listen on provided port
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

//normalize port in num, string or false
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }

  return false;
}

//http event listener
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  //handel error
  switch (error.code) {
    case "EACCES":
      console.error(bind + "require elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + "is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// event listener event for "listening" event
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe" + addr : "port" + addr.port;
  debug("listening on" + bind);
  console.log(`Server running on port ${port}...`);
}
